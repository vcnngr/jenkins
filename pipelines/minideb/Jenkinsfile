#!/usr/bin/env groovy
/**
 * VCNNGR Minideb Pipeline
 * 
 * Build base image Debian minimal con ultime patch di sicurezza
 * 
 * Trigger: 
 * - Manual
 * - Scheduled (weekly)
 * - Webhook da Debian security announce
 * 
 * Output:
 * - vcnngr/minideb:bookworm
 * - vcnngr/minideb:12
 * - vcnngr/minideb:latest
 */

pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: docker
    image: docker:24.0.9-dind
    securityContext:
      privileged: true
    env:
    - name: DOCKER_TLS_CERTDIR
      value: ""
    volumeMounts:
    - name: docker-storage
      mountPath: /var/lib/docker
    - name: shared-data
      mountPath: /shared
  - name: trivy
    image: aquasec/trivy:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - name: shared-data
      mountPath: /shared
  - name: tools
    image: alpine:latest
    command:
    - cat
    tty: true
  volumes:
  - name: docker-storage
    emptyDir: {}
  - name: shared-data
    emptyDir: {}
"""
        }
    }
    
    parameters {
        string(name: 'DEBIAN_VERSION', defaultValue: 'bookworm', description: 'Debian codename')
        string(name: 'DEBIAN_RELEASE', defaultValue: '12', description: 'Debian major version')
        booleanParam(name: 'SKIP_SCAN', defaultValue: false, description: 'Skip security scan')
        booleanParam(name: 'FORCE_BUILD', defaultValue: false, description: 'Force rebuild even if image exists')
    }
    
    // ========== CONFIGURAZIONE CRON ==========
    triggers {
        // Esegui ogni domenica alle 02:00
        cron('0 2 * * 0')
        
        // ALTRI ESEMPI:
        // Ogni giorno alle 03:00: cron('0 3 * * *')
        // Ogni lunedì alle 04:00: cron('0 4 * * 1')
        // Primo del mese alle 05:00: cron('0 5 1 * *')
        // Ogni 6 ore: cron('0 */6 * * *')
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_USER = 'vcnngr'
        IMAGE_NAME = "${DOCKERHUB_USER}/minideb"
        BUILD_DATE = sh(returnStdout: true, script: 'date -u +"%Y-%m-%dT%H:%M:%SZ"').trim()
        GIT_COMMIT_SHORT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
        
        // ========== CONFIGURAZIONE EMAIL ==========
        // MODIFICA QUESTO CON LA TUA EMAIL
        NOTIFICATION_EMAIL = 'vingrosso@gmail.com'
    }
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '20'))
        timeout(time: 45, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Verify Structure') {
            steps {
                script {
                    echo "Verifying repository structure..."
                    sh '''
                        echo "Current directory: $(pwd)"
                        echo "Repository contents:"
                        ls -la
                        echo "\nChecking for docker/minideb directory:"
                        ls -la docker/ || echo "docker/ not found"
                        ls -la docker/minideb/ || echo "docker/minideb/ not found"
                        echo "\nChecking for Dockerfile:"
                        test -f docker/minideb/Dockerfile && echo "✓ Dockerfile found" || echo "✗ Dockerfile NOT found"
                        echo "\nChecking for install_packages script:"
                        test -f docker/minideb/rootfs/usr/sbin/install_packages && echo "✓ install_packages found" || echo "✗ install_packages NOT found"
                    '''
                }
            }
        }
        
        stage('Check Existing Image') {
            when {
                expression { params.FORCE_BUILD == false }
            }
            steps {
                container('tools') {
                    script {
                        echo "Checking if image ${IMAGE_NAME}:${params.DEBIAN_VERSION} exists on Docker Hub..."
                        
                        sh 'apk add --no-cache curl'
                        
                        def imageExists = sh(
                            returnStatus: true,
                            script: """
                                curl -s -o /dev/null -w "%{http_code}" \
                                https://hub.docker.com/v2/repositories/${IMAGE_NAME}/tags/${params.DEBIAN_VERSION} | \
                                grep -q 200
                            """
                        )
                        
                        if (imageExists == 0) {
                            echo "Image already exists on Docker Hub"
                            env.SKIP_BUILD = 'true'
                        } else {
                            echo "Image does not exist, will build"
                            env.SKIP_BUILD = 'false'
                        }
                    }
                }
            }
        }
        
        stage('Build Minideb') {
            when {
                expression { env.SKIP_BUILD != 'true' || params.FORCE_BUILD == true }
            }
            steps {
                container('docker') {
                    script {
                        echo "Building VCNNGR Minideb ${params.DEBIAN_VERSION} with latest security patches"
                        
                        sh 'timeout 30 sh -c "until docker info; do sleep 1; done"'
                        
                        sh """
                            cd docker/minideb
                            
                            echo "Building image..."
                            docker build \
                                --no-cache \
                                --pull \
                                --tag ${IMAGE_NAME}:${params.DEBIAN_VERSION} \
                                --tag ${IMAGE_NAME}:${params.DEBIAN_RELEASE} \
                                --tag ${IMAGE_NAME}:latest \
                                --label "org.opencontainers.image.created=${BUILD_DATE}" \
                                --label "org.opencontainers.image.revision=${GIT_COMMIT_SHORT}" \
                                --label "org.opencontainers.image.version=${params.DEBIAN_VERSION}" \
                                --label "org.opencontainers.image.title=minideb" \
                                --label "org.opencontainers.image.description=Minimal Debian base image by VCNNGR" \
                                --label "org.opencontainers.image.vendor=VCNNGR" \
                                --label "org.opencontainers.image.source=https://github.com/vcnngr/jenkins" \
                                --label "org.opencontainers.image.licenses=MIT" \
                                .
                            
                            echo "Build completed successfully"
                            docker images | grep minideb
                            
                            echo "Saving image as tar for scanning..."
                            docker save ${IMAGE_NAME}:${params.DEBIAN_VERSION} -o /shared/minideb-image.tar
                            echo "Image saved to /shared/minideb-image.tar"
                        """
                    }
                }
            }
        }
        
        stage('Security Scan') {
            when {
                allOf {
                    expression { env.SKIP_BUILD != 'true' || params.FORCE_BUILD == true }
                    expression { params.SKIP_SCAN == false }
                }
            }
            steps {
                container('trivy') {
                    script {
                        echo "Running security scan with Trivy..."
                        
                        sh """
                            echo "Scanning image from tar archive..."
                            
                            # Scan for vulnerabilities
                            trivy image \
                                --input /shared/minideb-image.tar \
                                --severity HIGH,CRITICAL \
                                --exit-code 0 \
                                --format json \
                                --output minideb-scan.json
                            
                            # Generate human-readable report
                            trivy image \
                                --input /shared/minideb-image.tar \
                                --severity HIGH,CRITICAL,MEDIUM,LOW \
                                --format table | tee minideb-scan.txt
                        """
                        
                        archiveArtifacts artifacts: 'minideb-scan.*', allowEmptyArchive: true
                        
                        // Parse scan results
                        def scanResult = readJSON file: 'minideb-scan.json'
                        if (scanResult.Results) {
                            def criticalCount = 0
                            def highCount = 0
                            def mediumCount = 0
                            def lowCount = 0
                            
                            scanResult.Results.each { result ->
                                result.Vulnerabilities?.each { vuln ->
                                    if (vuln.Severity == 'CRITICAL') criticalCount++
                                    if (vuln.Severity == 'HIGH') highCount++
                                    if (vuln.Severity == 'MEDIUM') mediumCount++
                                    if (vuln.Severity == 'LOW') lowCount++
                                }
                            }
                            
                            // Store counts as environment variables
                            env.VULN_CRITICAL = criticalCount.toString()
                            env.VULN_HIGH = highCount.toString()
                            env.VULN_MEDIUM = mediumCount.toString()
                            env.VULN_LOW = lowCount.toString()
                            
                            echo "Security Scan Summary:"
                            echo "  - CRITICAL: ${criticalCount}"
                            echo "  - HIGH: ${highCount}"
                            echo "  - MEDIUM: ${mediumCount}"
                            echo "  - LOW: ${lowCount}"
                            
                            if (criticalCount > 0) {
                                unstable("Found ${criticalCount} CRITICAL vulnerabilities")
                            }
                        }
                    }
                }
            }
        }
        
        stage('Test Image') {
            when {
                expression { env.SKIP_BUILD != 'true' || params.FORCE_BUILD == true }
            }
            steps {
                container('docker') {
                    script {
                        echo "Testing minideb image..."
                        
                        sh """
                            docker run --rm ${IMAGE_NAME}:${params.DEBIAN_VERSION} bash -c '
                                echo "Testing minideb image..."
                                which install_packages || exit 1
                                which gosu || exit 1
                                which curl || exit 1
                                apt-get update > /dev/null
                                echo "All tests passed ✓"
                            '
                        """
                    }
                }
            }
        }
        
        stage('Push to Docker Hub') {
            when {
                allOf {
                    expression { env.SKIP_BUILD != 'true' || params.FORCE_BUILD == true }
                    anyOf {
                        branch 'main'
                        branch 'master'
                    }
                }
            }
            steps {
                container('docker') {
                    script {
                        echo "Pushing images to Docker Hub..."
                        
                        sh """
                            echo \$DOCKERHUB_CREDENTIALS_PSW | docker login -u \$DOCKERHUB_CREDENTIALS_USR --password-stdin
                            
                            docker push ${IMAGE_NAME}:${params.DEBIAN_VERSION}
                            docker push ${IMAGE_NAME}:${params.DEBIAN_RELEASE}
                            docker push ${IMAGE_NAME}:latest
                            
                            echo "Images pushed successfully ✓"
                            
                            docker logout
                        """
                    }
                }
            }
        }
        
        stage('Create Release Tag') {
            when {
                allOf {
                    expression { env.SKIP_BUILD != 'true' || params.FORCE_BUILD == true }
                    anyOf {
                        branch 'main'
                        branch 'master'
                    }
                }
            }
            steps {
                script {
                    def tagName = "minideb-${params.DEBIAN_VERSION}-${BUILD_DATE.replaceAll(':', '-')}"
                    
                    sh """
                        git config user.email "jenkins@vcnngr.local"
                        git config user.name "Jenkins CI"
                        git tag -a ${tagName} -m "Minideb ${params.DEBIAN_VERSION} - ${BUILD_DATE}" || true
                        git push origin ${tagName} || echo "Tag already exists or push failed"
                    """
                }
            }
        }
    }
    
    // ========== NOTIFICHE E POST-BUILD ==========
    post {
        always {
            container('docker') {
                sh 'docker logout || true'
            }
        }
        
        success {
            script {
                if (env.SKIP_BUILD == 'true' && params.FORCE_BUILD == false) {
                    echo "✓ Minideb ${params.DEBIAN_VERSION} already up-to-date, no build needed"
                } else {
                    echo "✓ Minideb ${params.DEBIAN_VERSION} built and published successfully"
                    echo "Images available:"
                    echo "  - ${IMAGE_NAME}:${params.DEBIAN_VERSION}"
                    echo "  - ${IMAGE_NAME}:${params.DEBIAN_RELEASE}"
                    echo "  - ${IMAGE_NAME}:latest"
                    
                    // ========== EMAIL DI SUCCESSO ==========
                    emailext (
                        subject: "✓ Minideb Build Success - ${params.DEBIAN_VERSION}",
                        body: """
                            <html>
                            <body style="font-family: Arial, sans-serif;">
                                <h2 style="color: #28a745;">Minideb Build Completed Successfully</h2>
                                
                                <h3>Build Information</h3>
                                <table style="border-collapse: collapse;">
                                    <tr><td style="padding: 5px;"><strong>Image:</strong></td><td style="padding: 5px;">${IMAGE_NAME}:${params.DEBIAN_VERSION}</td></tr>
                                    <tr><td style="padding: 5px;"><strong>Build Date:</strong></td><td style="padding: 5px;">${BUILD_DATE}</td></tr>
                                    <tr><td style="padding: 5px;"><strong>Git Commit:</strong></td><td style="padding: 5px;">${GIT_COMMIT_SHORT}</td></tr>
                                    <tr><td style="padding: 5px;"><strong>Build URL:</strong></td><td style="padding: 5px;"><a href="${env.BUILD_URL}">${env.BUILD_URL}</a></td></tr>
                                </table>
                                
                                <h3>Security Scan Results</h3>
                                <table style="border-collapse: collapse; border: 1px solid #ddd;">
                                    <tr style="background-color: #f2f2f2;">
                                        <th style="padding: 8px; border: 1px solid #ddd;">Severity</th>
                                        <th style="padding: 8px; border: 1px solid #ddd;">Count</th>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border: 1px solid #ddd; color: #dc3545;">CRITICAL</td>
                                        <td style="padding: 8px; border: 1px solid #ddd;">${env.VULN_CRITICAL ?: '0'}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border: 1px solid #ddd; color: #fd7e14;">HIGH</td>
                                        <td style="padding: 8px; border: 1px solid #ddd;">${env.VULN_HIGH ?: '0'}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border: 1px solid #ddd; color: #ffc107;">MEDIUM</td>
                                        <td style="padding: 8px; border: 1px solid #ddd;">${env.VULN_MEDIUM ?: '0'}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border: 1px solid #ddd; color: #6c757d;">LOW</td>
                                        <td style="padding: 8px; border: 1px solid #ddd;">${env.VULN_LOW ?: '0'}</td>
                                    </tr>
                                </table>
                                
                                <p><em>Detailed reports are attached to this email.</em></p>
                                
                                <h3>Available Images</h3>
                                <ul>
                                    <li><code>${IMAGE_NAME}:${params.DEBIAN_VERSION}</code></li>
                                    <li><code>${IMAGE_NAME}:${params.DEBIAN_RELEASE}</code></li>
                                    <li><code>${IMAGE_NAME}:latest</code></li>
                                </ul>
                                
                                <hr>
                                <p style="font-size: 12px; color: #666;">
                                    This is an automated message from Jenkins.<br>
                                    Job: ${env.JOB_NAME} | Build: #${env.BUILD_NUMBER}
                                </p>
                            </body>
                            </html>
                        """,
                        to: "${NOTIFICATION_EMAIL}",
                        mimeType: 'text/html',
                        attachmentsPattern: 'minideb-scan.*'
                    )
                }
            }
        }
        
        failure {
            echo "✗ Minideb pipeline failed"
            
            // ========== EMAIL DI ERRORE ==========
            emailext (
                subject: "✗ Minideb Build Failed - ${params.DEBIAN_VERSION}",
                body: """
                    <html>
                    <body style="font-family: Arial, sans-serif;">
                        <h2 style="color: #dc3545;">Minideb Build Failed</h2>
                        
                        <h3>Build Information</h3>
                        <table style="border-collapse: collapse;">
                            <tr><td style="padding: 5px;"><strong>Image:</strong></td><td style="padding: 5px;">${IMAGE_NAME}:${params.DEBIAN_VERSION}</td></tr>
                            <tr><td style="padding: 5px;"><strong>Build Date:</strong></td><td style="padding: 5px;">${BUILD_DATE}</td></tr>
                            <tr><td style="padding: 5px;"><strong>Git Commit:</strong></td><td style="padding: 5px;">${GIT_COMMIT_SHORT}</td></tr>
                            <tr><td style="padding: 5px;"><strong>Build URL:</strong></td><td style="padding: 5px;"><a href="${env.BUILD_URL}">${env.BUILD_URL}</a></td></tr>
                            <tr><td style="padding: 5px;"><strong>Console:</strong></td><td style="padding: 5px;"><a href="${env.BUILD_URL}console">${env.BUILD_URL}console</a></td></tr>
                        </table>
                        
                        <p style="color: #dc3545;"><strong>Action Required:</strong> Check the console output for error details.</p>
                        
                        <hr>
                        <p style="font-size: 12px; color: #666;">
                            This is an automated message from Jenkins.<br>
                            Job: ${env.JOB_NAME} | Build: #${env.BUILD_NUMBER}
                        </p>
                    </body>
                    </html>
                """,
                to: "${NOTIFICATION_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        unstable {
            echo "⚠ Minideb pipeline unstable - check security scan results"
            
            // ========== EMAIL PER VULNERABILITA' CRITICHE ==========
            emailext (
                subject: "⚠ Minideb Build Unstable - Critical Vulnerabilities Found",
                body: """
                    <html>
                    <body style="font-family: Arial, sans-serif;">
                        <h2 style="color: #ffc107;">Minideb Build Completed with Warnings</h2>
                        
                        <h3>Build Information</h3>
                        <table style="border-collapse: collapse;">
                            <tr><td style="padding: 5px;"><strong>Image:</strong></td><td style="padding: 5px;">${IMAGE_NAME}:${params.DEBIAN_VERSION}</td></tr>
                            <tr><td style="padding: 5px;"><strong>Build Date:</strong></td><td style="padding: 5px;">${BUILD_DATE}</td></tr>
                            <tr><td style="padding: 5px;"><strong>Build URL:</strong></td><td style="padding: 5px;"><a href="${env.BUILD_URL}">${env.BUILD_URL}</a></td></tr>
                        </table>
                        
                        <h3 style="color: #dc3545;">⚠ Critical Security Vulnerabilities Detected</h3>
                        <table style="border-collapse: collapse; border: 1px solid #ddd;">
                            <tr style="background-color: #f2f2f2;">
                                <th style="padding: 8px; border: 1px solid #ddd;">Severity</th>
                                <th style="padding: 8px; border: 1px solid #ddd;">Count</th>
                            </tr>
                            <tr>
                                <td style="padding: 8px; border: 1px solid #ddd; color: #dc3545;">CRITICAL</td>
                                <td style="padding: 8px; border: 1px solid #ddd;"><strong>${env.VULN_CRITICAL ?: '0'}</strong></td>
                            </tr>
                            <tr>
                                <td style="padding: 8px; border: 1px solid #ddd; color: #fd7e14;">HIGH</td>
                                <td style="padding: 8px; border: 1px solid #ddd;"><strong>${env.VULN_HIGH ?: '0'}</strong></td>
                            </tr>
                        </table>
                        
                        <p style="color: #dc3545;"><strong>Action Required:</strong> Review the attached security scan reports immediately.</p>
                        
                        <hr>
                        <p style="font-size: 12px; color: #666;">
                            This is an automated message from Jenkins.<br>
                            Job: ${env.JOB_NAME} | Build: #${env.BUILD_NUMBER}
                        </p>
                    </body>
                    </html>
                """,
                to: "${NOTIFICATION_EMAIL}",
                mimeType: 'text/html',
                attachmentsPattern: 'minideb-scan.*'
            )
        }
    }
}